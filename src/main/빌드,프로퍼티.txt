프로퍼티스
spring.application.name=Lunch_Match

#???, ???? ?? ??? ??????.

# 1 ??? ?? ?? ??
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/webdb
spring.datasource.username=webuser
spring.datasource.password=webuser

# 2, ???? ??,
# ???? ?? info, ??? ???? ???? debug ???
logging.level.springframework=debug
# logging.level.com.busanit501=debug  <-- ? ??? ??? ?? ?????.
logging.level.webproject_2team=debug

# 3, spring data jpa ??,
# ?? ???, ??? ???? ?? ??.
# ??????? ??? ?? ???, ???? ??? ??.
# ??, ?? ?????, ????? ?????, ??? ??? ??, ?? ???? ????.

# ?? ??,
# none : DDL ?? ??.
# create-drop : ??? ?, DDL ???? ???,
# ??? ??,
# create : ??? ???, ??? ?? ?? ??
# validate : ??? ??? ???? ??
# ??, ?? ??, update
# ?? ??, none, validate , ? ????.
spring.jpa.hibernate.ddl-auto=update
# ?? ?? ???, sql ??? ??? ??? ?????.
spring.jpa.properties.hibernate.format_sql=true
# sql ??? ????? ????? ??.
spring.jpa.show-sql=true

#?? ??? ?? ??.
# ???? ???? ??, ???, ????, ????, static ??? ??? ??
spring.servlet.multipart.enabled=true
# ?????, ???? ???? ??
spring.servlet.multipart.location=c:\\upload\\springTest
spring.servlet.multipart.max-request-size=100MB
spring.servlet.multipart.max-file-size=100MB
#??????, , @Value ????? ????, ??? ???? , ?? ??
#Profile ?? ?? + ??
# com.busanit501.upload.path=c:\\upload\\profile  <-- ? ??? ??? ?? ?????.
webproject_2team.upload.path=c:\\upload\\profile

# boot ???? ??
spring.devtools.restart.enabled=false

# Spring Security ?? ??? ?? ??????. (? ?? ?? ?? ???)
# logging.level.org.springframework.security=trace #CKM

#?? ??? ??
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=coko9437@gmail.com
spring.mail.password=nkdshnutnoztpsor
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.default-encoding=UTF-8
#?? ??? ??
#CKM

# =================== L S Y 설정 (MyBatis 및 Kakao API) =======================
# 8. MyBatis 설정
mybatis.mapper-locations=classpath:/mapper/**/*.xml
mybatis.configuration.map-underscore-to-camel-case=true

# 9. Flyway 마이그레이션 비활성화
spring.flyway.enabled=false

# ======================================= #
# Kakao API Settings (카카오 API 설정)
# ======================================= #
# 카카오 REST API 및 JavaScript 키를 application-secret.properties 파일에서 로드
# 이 설정을 통해 민감한 API 키가 Git에 노출되지 않도록 합니다.
spring.profiles.include=secret

# 카카오 API 기본 URL 및 키워드 검색 URL (이 부분은 민감 정보가 아니므로 여기에 유지)
kakao.api.url=https://dapi.kakao.com
kakao.local.api.keyword.url=${kakao.api.url}/v2/local/search/keyword.json
# =================== L S Y 설정 끝 =======================


----------------------------------------
빌드

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

// 순서1 Querydsl 사용하기 위한 변수 설정 (plugins 블록 아래로 이동)
ext {
    queryDslVersion = "5.0.0"
}

// 'group' 설정을 'webproject_2team'으로 변경했습니다.
group = 'webproject_2team'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
    }
    annotationProcessor {
        extendsFrom compileOnly
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    implementation 'org.flywaydb:flyway-core:9.22.3'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'

    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.1.0'
    implementation 'org.modelmapper:modelmapper:3.2.4'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
    implementation 'net.coobird:thumbnailator:0.4.20'

    // Spring Security 관련 의존성은 주석 처리된 상태를 유지합니다.
    // implementation 'org.springframework.boot:spring-boot-starter-security:3.5.3'
    // implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.2.RELEASE'

    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'software.amazon.awssdk:s3:2.26.18'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

tasks.named('test') {
    useJUnitPlatform()
}

// ===================================================================
// Querydsl 빌드 설정
// ===================================================================
def generatedDir = "src/main/generated"

sourceSets {
    main.java.srcDirs += [generatedDir]
}

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(generatedDir))
}

tasks.named('clean') {
    doLast {
        file(generatedDir).deleteDir()
    }
}